pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'angularapp'
        
    }
    stages {
        stage('Clone Repository') {
            steps {
                // Étape 1: Cloner le dépôt Git contenant le code source de l'application Angular
                git 'https://github.com/your-repo-url'
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    // Étape 2: Installer les dépendances nécessaires pour l'application Angular
                    docker.image('node:latest').inside {
                        sh 'npm install'
                    }
                }
            }
        }
        
        stage('Run Docker Container') {
            steps {
                script {
                    // Étape 6: Créer et exécuter un conteneur Docker à partir de l'image Docker construite
                    def dockerRunCmd = "docker run -d -p 8080:80 --name angular-app ${DOCKER_IMAGE}}"
                    sh "${dockerRunCmd}"
                    
                    // Attendre que le conteneur démarre
                    sh 'sleep 10'
                    
                    // Vérifier que le conteneur est en cours d'exécution
                    sh 'docker ps | grep angular_app'
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    
                    sh 'docker login -u SANZER3 -p fdgsteF3 '          
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
        stage('Blue-Green Deployment') {
            steps {
                script {
                    // Étape 8: Déploiement bleu-vert
                    
                    // Step 1: Deploy the new container (green)
                    def greenContainer = docker.image("${DOCKER_IMAGE}").run("-d -p 8080:80 --name green-angular-app")

                    // Step 2: Wait for the new container to start
                    sh 'sleep 10'
                    
                    // Step 3: Test the new container to ensure it's running correctly
                    sh '''
                    if ! curl -f http://localhost:8080; then
                        docker logs green-angular-app
                        docker stop green-angular-app
                        docker rm green-angular-app
                        error("New container failed to start correctly")
                    fi
                    '''
                    
                    // Step 4: Optionally, keep the old container running for rollback
                    sh '''
                    # Rename green container to blue for the next deployment
                    docker rename green-angular-app blue-angular-app || true
                    '''
                }
            }
        }
    }
    post {
        always {
            // Nettoyer l'espace de travail après chaque build
            cleanWs()
        }
    }
}